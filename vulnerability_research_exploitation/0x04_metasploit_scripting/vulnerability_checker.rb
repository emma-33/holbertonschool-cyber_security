#!/usr/bin/env ruby

class MetasploitModule < Msf::Auxiliary

  Rank = NormalRanking
  include Msf::Exploit::Remote::Tcp
  include Msf::Auxiliary::Scanner

    def initialize(info = {})
        super(update_info(info,
        'Name'     => 'MS17-010 (EternalBlue) vulnerability checker',
        'Description' => %q{
            The purpose of this script is to checks if a target system
            is vulnerable to the MS17-010 (EternalBlue) vulnerability.
        },
        'Author'   => [ 'Emma LATEYRON' ],
        'License'  => MSF_LICENSE))

        register_options(
            [
                Opt::RHOST(),
                OptPort.new('RPORT', [ true, 'The SMB service port', 445 ])
            ]
        )
    end
      
    def run_host(ip)
        print_status("Checking #{ip} for MS17-010 vulnerabilty")

        sock = connect
        smb_request = "\x00\x00\x00\x90" +
                  "\xffSMB@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
                  "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
                  "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
                  "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
                  "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
                  "\x00\x00"
        sock.put(smb_request)
        response = sock.get_once(-1, 5)

        if response && response.include?("Public")
            print_good("#{ip} is vulnerable to MS17-010")
        else
            print_error("#{ip} does not appear to be vulnerable.")
        end

        disconnect
        rescue ::Interrupt
            raise
        rescue ::Rex::ConnectionError
            print_error("#{ip} - Connection failed")
    end
end
