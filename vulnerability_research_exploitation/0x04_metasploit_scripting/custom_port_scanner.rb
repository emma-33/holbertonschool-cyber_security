#!/usr/bin/env ruby

class MetasploitModule < Msf::Auxiliary

  Rank = NormalRanking
  include Msf::Exploit::Remote::Tcp
  include Msf::Auxiliary::Scanner

    def initialize(info = {})
        super(update_info(info,
        'Name'     => 'Custom port scanner',
        'Description' => %q{
            The purpose of this script is to scan a range of ports
            on a target system and identifies which ones are open.
        },
        'Author'   => [ 'Emma LATEYRON' ],
        'License'  => MSF_LICENSE))

        register_options(
            [
                Opt::RHOST(),
                OptInt.new('STARTPORT', [true, 'Start of port range', 1]),
                OptInt.new('ENDPORT', [true, 'End of port range', 1024]),
                OptInt.new('RPORT',     [false, 'Unused but required by scanner module', 0])
            ]
        )
    end
      
    def run_host(ip)
        start_port = datastore['STARTPORT']
        end_port = datastore['ENDPORT']
        open_ports = []

        print_status("Running module against #{ip}\n")

        (start_port..end_port).each { |port|
            begin
                connect(false, { 'RHOST' => ip, 'RPORT' => port })
                print_good("#{ip}:#{port} - Port #{port} is open on #{ip}")
                open_ports << port
            rescue Rex::ConnectionError
            ensure
                disconnect(sock) if sock
            end
        }

        if open_ports.any?
            print_status("Open ports on #{ip}: #{open_ports.join(', ')}")
        else
            print_status("No open ports found on #{ip} in range #{datastore['STARTPORT']} - #{datastore['ENDPORT']}")
        end
    end
end
